// automatically generated by the FlatBuffers compiler, do not modify

package frc.taurus.logger.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LogStatus extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static LogStatus getRootAsLogStatus(ByteBuffer _bb) { return getRootAsLogStatus(_bb, new LogStatus()); }
  public static LogStatus getRootAsLogStatus(ByteBuffer _bb, LogStatus obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public frc.taurus.logger.generated.ChannelStatus channelStatus(int j) { return channelStatus(new frc.taurus.logger.generated.ChannelStatus(), j); }
  public frc.taurus.logger.generated.ChannelStatus channelStatus(frc.taurus.logger.generated.ChannelStatus obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 4, bb) : null; }
  public int channelStatusLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public frc.taurus.logger.generated.ChannelStatus.Vector channelStatusVector() { return channelStatusVector(new frc.taurus.logger.generated.ChannelStatus.Vector()); }
  public frc.taurus.logger.generated.ChannelStatus.Vector channelStatusVector(frc.taurus.logger.generated.ChannelStatus.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createLogStatus(FlatBufferBuilder builder,
      int channel_statusOffset) {
    builder.startTable(1);
    LogStatus.addChannelStatus(builder, channel_statusOffset);
    return LogStatus.endLogStatus(builder);
  }

  public static void startLogStatus(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addChannelStatus(FlatBufferBuilder builder, int channelStatusOffset) { builder.addOffset(0, channelStatusOffset, 0); }
  public static void startChannelStatusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 2); }
  public static int endLogStatus(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // channel_status
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogStatus get(int j) { return get(new LogStatus(), j); }
    public LogStatus get(LogStatus obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

